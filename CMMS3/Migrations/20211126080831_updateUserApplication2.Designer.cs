// <auto-generated />
using System;
using CMMS3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMMS3.Migrations
{
    [DbContext(typeof(CmmsContext))]
    [Migration("20211126080831_updateUserApplication2")]
    partial class updateUserApplication2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CMMS3.Models.Entities.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdFk");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("CompnayIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyTitle = "PSG",
                            CompnayIndex = (byte)1,
                            Description = "شرکت پدیده شیمی غرب"
                        });
                });

            modelBuilder.Entity("CMMS3.Models.Entities.ConsumablePart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumablePartTitel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("RequestIdFk")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestIdFk");

                    b.HasIndex("UnitIdFk");

                    b.ToTable("ConsumableParts");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("GroupIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdFk");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.IdentityCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<short>("CodeIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("CodeTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GroupIdFk")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupIdFk")
                        .HasColumnType("int");

                    b.Property<string>("UserIdFk")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdFk");

                    b.HasIndex("GroupIdFk");

                    b.HasIndex("SubGroupIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("IdentityCodes");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.IdentityMachinery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Calibration")
                        .HasColumnType("bit");

                    b.Property<string>("CalibrationAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CalibrationCompany")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CalibrationFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CalibrationTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Company")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CompanyTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Countery")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateEndWaranty")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStartWaranty")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeImport")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("MachinerIdFk")
                        .HasColumnType("int");

                    b.Property<bool>("NewDivice")
                        .HasColumnType("bit");

                    b.Property<string>("SupplyAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SupplyFax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SupplyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SupplyTel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TypeDevice")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("Wight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachinerIdFk");

                    b.ToTable("IdentityMachineries");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Machinery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantIdFk")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("IdentityCodeIdFk")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MachineryTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantIdFk");

                    b.HasIndex("IdentityCodeIdFk");

                    b.ToTable("Machineries");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.PowerElectricalMachinery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amper")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Kw")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MachineryIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Manifactor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Voltag")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MachineryIdFk");

                    b.ToTable("PowerElectricalMachineries");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.PublicType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicTypes");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RepairMan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RepairManStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RepairmanFullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("RepairMens");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RepairManListed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RepairManIdFk")
                        .HasColumnType("int");

                    b.Property<long>("WorkOrderIdFk")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepairManIdFk");

                    b.HasIndex("WorkOrderIdFk");

                    b.ToTable("RepairManListeds");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Repairout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BackendRequest")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Regidtered")
                        .HasColumnType("datetime");

                    b.Property<string>("RepairOutFullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RepairReportOut")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("RequestIdFk")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestRepairOut")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserIdFk")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("Repairouts");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RequestRepair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantIdFk")
                        .HasColumnType("int");

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<bool>("Em")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepairOut")
                        .HasColumnType("bit");

                    b.Property<int>("MachineryIdFk")
                        .HasColumnType("int");

                    b.Property<int>("PublicTypeIdFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDataTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserIdFk")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantIdFk");

                    b.HasIndex("CompanyIdFk");

                    b.HasIndex("MachineryIdFk");

                    b.HasIndex("PublicTypeIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("RequestRepairs");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.ServicePeriode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MachineryIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Periode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registred")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UnitIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineryIdFk");

                    b.HasIndex("UnitIdFk");

                    b.ToTable("ServicePeriodes");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MachineryIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Minimal")
                        .HasColumnType("int");

                    b.Property<string>("SparePartNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SparePartTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UnitIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineryIdFk");

                    b.HasIndex("UnitIdFk");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.SubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GroupIdFk")
                        .HasColumnType("int");

                    b.Property<byte>("SubGroupIndex")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubGroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdFk");

                    b.HasIndex("GroupIdFk");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasurements");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.UserApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyIdFk")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LimetedCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdFk");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "cf4b710b-c1eb-4e89-b0f1-bd9e8c5a31dd",
                            AccessFailedCount = 0,
                            CompanyIdFk = 1,
                            ConcurrencyStamp = "24d3313e-8804-4acd-ba52-7ffe1a6e43ff",
                            Email = "fm708801@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Farshid",
                            Lastname = "Mohammadi",
                            LimetedCompany = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FM708801@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELYdrMvR/R78xxYSgTf2yTMjeAdCpCO+BiQTOmym/s4Ye75VuVYPm+YRIwzH2wyv0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1e4e3cb-d92e-4a74-aa76-1f66fcd4c53f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("CMMS3.Models.Entities.WorkOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CauseExhaustion")
                        .HasColumnType("bit");

                    b.Property<bool>("CauseOperatorNegligence")
                        .HasColumnType("bit");

                    b.Property<bool>("CauseQualityofSpareParts")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateTimeClosing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndWorking")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("NoSpareParts")
                        .HasColumnType("bit");

                    b.Property<string>("NoSparePartsDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("NoSparePartsTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("OtherError")
                        .HasColumnType("bit");

                    b.Property<string>("OtherErrorDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("OtherTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("PersonHours")
                        .HasColumnType("bit");

                    b.Property<string>("PersonHoursDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("PersonHoursTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("ProductionPlanning")
                        .HasColumnType("bit");

                    b.Property<string>("ProductionPlanningDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("ProductionPlanningTime")
                        .HasColumnType("smallint");

                    b.Property<int?>("RepairOutSideReportIdFk")
                        .HasColumnType("int");

                    b.Property<bool>("RepairOutside")
                        .HasColumnType("bit");

                    b.Property<string>("ReportRepair")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<long>("RequestIdFk")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartWorking")
                        .HasColumnType("datetime");

                    b.Property<int>("StopTotalMin")
                        .HasColumnType("int");

                    b.Property<int>("WorkingTotalMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestIdFk");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Applicant", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("Applicants")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.ConsumablePart", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.RequestRepair", "RequestRepair")
                        .WithMany("ConsumableParts")
                        .HasForeignKey("RequestIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("ConsumableParts")
                        .HasForeignKey("UnitIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestRepair");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Group", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.IdentityCode", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("IdentityCodes")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.Group", "Group")
                        .WithMany("IdentityCodes")
                        .HasForeignKey("GroupIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.SubGroup", "SubGroup")
                        .WithMany("Codings")
                        .HasForeignKey("SubGroupIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UserApplication", "UserApplication")
                        .WithMany("IdentityCodes")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");

                    b.Navigation("SubGroup");

                    b.Navigation("UserApplication");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.IdentityMachinery", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Machinery", "Machinery")
                        .WithMany("IdentityMachineries")
                        .HasForeignKey("MachinerIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Machinery");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Machinery", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Applicant", "Applicant")
                        .WithMany("Machineries")
                        .HasForeignKey("ApplicantIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.IdentityCode", "IdentityCode")
                        .WithMany("Machineries")
                        .HasForeignKey("IdentityCodeIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("IdentityCode");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.PowerElectricalMachinery", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Machinery", "Machinery")
                        .WithMany("PowerElectricalMachineries")
                        .HasForeignKey("MachineryIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Machinery");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RepairManListed", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.RepairMan", "RepairMan")
                        .WithMany("RepairManListeds")
                        .HasForeignKey("RepairManIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.WorkOrder", "WorkOrder")
                        .WithMany("RepairManListeds")
                        .HasForeignKey("WorkOrderIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RepairMan");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Repairout", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.RequestRepair", "RequestRepair")
                        .WithMany("Repairouts")
                        .HasForeignKey("RequestIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UserApplication", "UserApplication")
                        .WithMany("Repairouts")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestRepair");

                    b.Navigation("UserApplication");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RequestRepair", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Applicant", "Applicant")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("ApplicantIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.Machinery", "Machinery")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("MachineryIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.PublicType", "PublicType")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("PublicTypeIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UserApplication", "UserApplication")
                        .WithMany("RequestRepairs")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Company");

                    b.Navigation("Machinery");

                    b.Navigation("PublicType");

                    b.Navigation("UserApplication");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.ServicePeriode", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Machinery", "Machinery")
                        .WithMany("ServicePeriodes")
                        .HasForeignKey("MachineryIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("ServicePeriodes")
                        .HasForeignKey("UnitIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Machinery");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.SparePart", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Machinery", "Machinery")
                        .WithMany("SpareParts")
                        .HasForeignKey("MachineryIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("SpareParts")
                        .HasForeignKey("UnitIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Machinery");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.SubGroup", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("SubGroups")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.Group", "Group")
                        .WithMany("SubGroups")
                        .HasForeignKey("GroupIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.UserApplication", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.Company", "Company")
                        .WithMany("UserApplications")
                        .HasForeignKey("CompanyIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.WorkOrder", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.RequestRepair", "RequestRepair")
                        .WithMany("WorkOrders")
                        .HasForeignKey("RequestIdFk")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestRepair");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.UserApplication", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.UserApplication", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMMS3.Models.Entities.UserApplication", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMMS3.Models.Entities.UserApplication", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Applicant", b =>
                {
                    b.Navigation("Machineries");

                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Company", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("Groups");

                    b.Navigation("IdentityCodes");

                    b.Navigation("RequestRepairs");

                    b.Navigation("SubGroups");

                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Group", b =>
                {
                    b.Navigation("IdentityCodes");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.IdentityCode", b =>
                {
                    b.Navigation("Machineries");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.Machinery", b =>
                {
                    b.Navigation("IdentityMachineries");

                    b.Navigation("PowerElectricalMachineries");

                    b.Navigation("RequestRepairs");

                    b.Navigation("ServicePeriodes");

                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.PublicType", b =>
                {
                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RepairMan", b =>
                {
                    b.Navigation("RepairManListeds");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.RequestRepair", b =>
                {
                    b.Navigation("ConsumableParts");

                    b.Navigation("Repairouts");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.SubGroup", b =>
                {
                    b.Navigation("Codings");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.UnitOfMeasurement", b =>
                {
                    b.Navigation("ConsumableParts");

                    b.Navigation("ServicePeriodes");

                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.UserApplication", b =>
                {
                    b.Navigation("IdentityCodes");

                    b.Navigation("Repairouts");

                    b.Navigation("RequestRepairs");
                });

            modelBuilder.Entity("CMMS3.Models.Entities.WorkOrder", b =>
                {
                    b.Navigation("RepairManListeds");
                });
#pragma warning restore 612, 618
        }
    }
}
